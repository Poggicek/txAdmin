name: Production build

on:
  push:
    tags:
      - v*

jobs:
  check-tag-branch:
    runs-on: ubuntu-latest
    steps:
    - name: get tag commit hash
      id: tag-commit-hash
      run: |
        hash=${{ GITHUB.SHA }}
        echo "::set-output name=tag-hash::${hash}"
        echo $hash
    - name: checkout master
      uses: actions/checkout@v2
      with:
        ref: shit
    - name: get latest master commit hash
      id: master-commit-hash
      run: |
        hash=$(git log -n1 --format=format:"%H")
        echo "::set-output name=master-hash::${hash}"
        echo $hash
    - name: exit if tag commit hash don't match master commit hash
      if: steps.tag-commit-hash.outputs.tag-hash != steps.master-commit-hash.outputs.master-hash
      run: exit 1

  build:
    needs: [check-tag-branch]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: 'Use Node.js ${{ matrix.node-version }}'
        uses: actions/setup-node@v1
        with:
          node-version: '${{ matrix.node-version }}'

      - name: Download all modules
        run: npm ci
      - name: Build project
        run: npm run build
      - name: Compress build output with zip
        run: (cd ./dist; zip -r ../monitor.zip .)

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./monitor.zip
          asset_name: monitor.zip
          asset_content_type: application/zip
